package database

import (
	"context"
	"fmt"
	"log"

	"github.com/KladeRe/stock-server/internal/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type StockConfig struct {
	// ID is automatically generated by database
	Id           primitive.ObjectID `bson:"_id,omitempty"`
	Symbol       string             `bson:"symbol"`
	Value        float32            `bson:"value"`
	Buy          bool               `bson:"buy"`
	Notification string             `bson:"notification"`
}

type DB_Client struct {
	mongo_client     *mongo.Client
	mongo_collection *mongo.Collection
}

func getCollection(client *mongo.Client) *mongo.Collection {
	// Access a specific database and collection
	collection := client.Database("stockconfig").Collection("stocks")
	return collection
}

func EstablishDBClient() *DB_Client {
	DB_HOST, hostError := utils.GetEnvVariable("DB_HOST")

	DB_PORT, portError := utils.GetEnvVariable(("DB_PORT"))

	if portError != nil {
		log.Fatal(portError)
	}

	if hostError != nil {
		log.Fatal(hostError)
	}

	// MongoDB URI (connect to your local MongoDB instance)
	clientOptions := options.Client().ApplyURI("mongodb://" + DB_HOST + ":" + DB_PORT)

	// Connect to MongoDB
	client, connectionErr := mongo.Connect(context.TODO(), clientOptions)
	if connectionErr != nil {
		log.Fatal(connectionErr)
	}

	// Check the connection
	pingErr := client.Ping(context.TODO(), nil)
	if pingErr != nil {
		log.Fatal(pingErr)
	}

	newCollection := getCollection(client)

	database_client := DB_Client{client, newCollection}

	return &database_client
}

func (client *DB_Client) CloseClient() (string, error) {
	err := client.mongo_client.Disconnect(context.TODO())
	if err != nil {
		return "", err
	}

	return "Connection to DB closed", nil
}

func (client *DB_Client) AddDocument(newConfig StockConfig) {

	// Insert the document into the collection
	insertResult, err := client.mongo_collection.InsertOne(context.TODO(), newConfig)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Inserted a single document: ", insertResult.InsertedID)

}

func (client *DB_Client) DeleteDocument(id primitive.ObjectID) (string, error) {
	filter := bson.M{"_id": id}
	deleteResult, deleteErr := client.mongo_collection.DeleteOne(context.TODO(), filter)
	if deleteErr != nil {
		return "", deleteErr
	}
	if deleteResult.DeletedCount > 0 {
		return "Deleted document successfully", nil
	} else {
		return "No document found with the ID given", nil
	}

}

func (client *DB_Client) GetAllDocuments() ([]StockConfig, error) {
	results := []StockConfig{}
	cursor, cursorErr := client.mongo_collection.Find(context.TODO(), bson.D{})
	if cursorErr != nil {
		return []StockConfig{}, cursorErr
	}
	for cursor.Next(context.TODO()) {
		var result StockConfig
		nextErr := cursor.Decode(&result)
		if nextErr != nil {
			return []StockConfig{}, nextErr
		}
		results = append(results, result)

	}

	return results, nil
}

func (client *DB_Client) GetDocumentBySymbol(symbol string) (StockConfig, error) {
	filter := bson.M{"symbol": symbol}

	var result StockConfig
	err := client.mongo_collection.FindOne(context.TODO(), filter).Decode(&result)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return StockConfig{}, fmt.Errorf("no such document in database")
		} else {
			return StockConfig{}, fmt.Errorf("problem when reading database")
		}

	}
	return result, nil
}
